{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "HEART",
	"scopeName": "source.heart",
	"patterns": [
		{
			"name": "keyword.control.heart",
			"match": "\\b(branch_if|branch|return)\\b"
		},
		{
			"name": "storage.type.heart",
			"match": "\\b(const|void|int|int32|int64|float|float32|float64|fixed|bool|string|node|event|stream|value|wrap|clamp|external)\\b"
		},
		{
			"name": "entity.name.type.heart",
			"match": "\\b(let|var|graph|processor|namespace|struct|function|enum|input|output|connection|import)\\b"
		},
		{
			"name": "entity.name.function.heart",
			"match": "\\b(read|write|advance|cast|call|add|multiply|subtract|divide|modulo|bitwiseOr|bitwiseAnd|bitwiseXor|logicalOr|logicalAnd|equals|notEquals|lessThan|lessThanOrEqual|greaterThan|greaterThanOrEqual|leftShift|rightShift|rightShiftUnsigned|negate|logicalNot|bitwiseNot)\\b"
		},
		{
			"name": "entity.name.tag.heart",
			"match": "\\b(none|latch|linear|sinc|fast|best)\\b"
		},
		{
			"name": "entity.name.section.heart",
			"match": "([@*])\\w+"
		},
		{
			"name": "variable.other.heart",
			"match": "([$*])\\w+"
		},
		{
			"name": "invalid.illegal.heart",
			"match": "\\b(try|catch|throw|class|default|operator|switch|case)\\b"
		},
		{
			"name": "comment.line.number-sign.heart",
			"begin": "#",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.cpp"
				}
			},
			"end": "(?=\\n)",
			"patterns": [
				{
					"match": "(\\\\)\\n"
				}
			]
		},
		{
			"match": "->|<-",
			"name": "keyword.other.heart"
		},
		{
			"match": "<<|>>",
			"name": "keyword.other.heart"
		},
		{
			"match": "\\.|::",
			"name": "punctuation.separator.heart"
		},
		{
			"match": ";",
			"name": "punctuation.terminator.heart"
		},
		{
			"match": "=",
			"name": "keyword.operator.assignment.heart"
		},
		{
			"match": "%|\\*|/|-|\\+",
			"name": "keyword.operator.heart"
		},
		{
			"match": "\\b(true|false)\\b",
			"name": "constant.language.heart"
		},
		{
			"match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(f)?|([0-9]*([0-9']*[0-9])?(L))\\b",
			"name": "constant.numeric.heart"
		},
		{
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.heart"
				}
			},
			"end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.heart"
				}
			},
			"patterns": [
				{
					"include": "#preprocessor-rule-conditional-line"
				}
			]
		},
		{
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.block.begin.bracket.curly.heart"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.block.end.bracket.curly.heart"
				}
			},
			"name": "meta.block.c",
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		{
			"match": "(\\[)|(\\])",
			"captures": {
				"1": {
					"name": "punctuation.definition.begin.bracket.square.heart"
				},
				"2": {
					"name": "punctuation.definition.end.bracket.square.heart"
				}
			}
		},
		{
			"match": "(\\[\\[)|(\\]\\])",
			"captures": {
				"1": {
					"name": "punctuation.definition.block.begin.bracket.square.heart"
				},
				"2": {
					"name": "punctuation.definition.block.end.bracket.square.heart"
				}
			}
		},
		{
			"name": "string.quoted.double.heart",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.heart",
					"match": "\\\\."
				}
			]
		},
		{
			"name": "keyword.control.directive.heart",
			"begin": "^##",
			"end": "(?=\\n)"
		}
	]
}